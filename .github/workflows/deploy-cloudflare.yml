name: Archived - Deploy to Cloudflare Pages (disabled)

on:
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  CLOUDFLARE_PROJECT_NAME: 'kasama-ai'

jobs:
  # Build and test before deployment
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    outputs:
      build-id: ${{ steps.build-info.outputs.build-id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript check
        run: npm run typecheck

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm run test:run
        continue-on-error: true

      - name: Build application
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_APP_ENV: ${{ github.event_name == 'push' && 'production' || 'preview' }}
          VITE_ENABLE_AI_FEATURES: ${{ vars.VITE_ENABLE_AI_FEATURES || 'true' }}
          VITE_ENABLE_OFFLINE_MODE: ${{ vars.VITE_ENABLE_OFFLINE_MODE || 'true' }}
          VITE_ENABLE_ANALYTICS: ${{ github.event_name == 'push' && 'true' || 'false' }}
          VITE_ENABLE_ERROR_TRACKING: ${{ vars.VITE_ENABLE_ERROR_TRACKING || 'true' }}
          VITE_API_TIMEOUT: ${{ vars.VITE_API_TIMEOUT || '30000' }}
          VITE_API_RETRY_ATTEMPTS: ${{ vars.VITE_API_RETRY_ATTEMPTS || '3' }}
          VITE_CACHE_TTL: ${{ vars.VITE_CACHE_TTL || '3600000' }}
          VITE_CACHE_ENABLED: ${{ vars.VITE_CACHE_ENABLED || 'true' }}

      - name: Generate build info
        id: build-info
        run: |
          echo "build-id=$(date +%Y%m%d%H%M%S)-${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
          echo "## 📦 Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Build ID**: $(date +%Y%m%d%H%M%S)-${GITHUB_SHA::8}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${GITHUB_SHA::8}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${GITHUB_REF_NAME}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${GITHUB_ACTOR}" >> $GITHUB_STEP_SUMMARY
          echo "- **Event**: ${GITHUB_EVENT_NAME}" >> $GITHUB_STEP_SUMMARY

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-${{ steps.build-info.outputs.build-id }}
          path: dist/
          retention-days: 7

      - name: Bundle size report
        run: |
          echo "## 📊 Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size | Gzipped |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|---------|" >> $GITHUB_STEP_SUMMARY
          find dist -type f \( -name "*.js" -o -name "*.css" \) -exec du -h {} \; | while read size file; do
            filename=$(basename "$file")
            gzipped=$(gzip -c "$file" | wc -c | numfmt --to=iec)
            echo "| $filename | $size | $gzipped |" >> $GITHUB_STEP_SUMMARY
          done

  # Deploy to Cloudflare Pages - Preview
  deploy-preview:
    name: Deploy Preview
    if: github.event_name == 'pull_request'
    needs: build-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
      pull-requests: write
    environment:
      name: preview
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-${{ needs.build-test.outputs.build-id }}
          path: dist/

      - name: Deploy to Cloudflare Pages
        id: deploy
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ env.CLOUDFLARE_PROJECT_NAME }}
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          deploymentName: preview-pr-${{ github.event.pull_request.number }}

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const url = '${{ steps.deploy.outputs.url }}';
            const buildId = '${{ needs.build-test.outputs.build-id }}';
            const comment = `## 🚀 Preview Deployment Ready!
            
            **Preview URL**: ${url}
            **Build ID**: ${buildId}
            **Status**: ✅ Deployed successfully
            
            ### 📋 Deployment Details
            - **Environment**: Preview
            - **Branch**: \`${{ github.head_ref }}\`
            - **Commit**: \`${{ github.event.pull_request.head.sha.substring(0, 8) }}\`
            - **Deployed at**: ${new Date().toISOString()}
            
            ### 🧪 Testing Checklist
            - [ ] Visual regression testing
            - [ ] Core functionality verification
            - [ ] Mobile responsiveness
            - [ ] Performance metrics
            - [ ] Console error check
            
            ---
            <sub>🤖 Deployed via Cloudflare Pages</sub>`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Deploy to Cloudflare Pages - Production
  deploy-production:
    name: Deploy Production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-${{ needs.build-test.outputs.build-id }}
          path: dist/

      - name: Deploy to Cloudflare Pages
        id: deploy
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ env.CLOUDFLARE_PROJECT_NAME }}
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          branch: main

      - name: Create deployment record
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              required_contexts: [],
              auto_merge: false,
              production_environment: true,
              description: 'Cloudflare Pages Production Deployment'
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: '${{ steps.deploy.outputs.url }}',
              description: 'Deployed to Cloudflare Pages'
            });

      - name: Notify deployment
        run: |
          echo "## ✅ Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ steps.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build ID**: ${{ needs.build-test.outputs.build-id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed at**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY

  # Post-deployment health check
  health-check:
    name: Health Check
    needs: [deploy-preview, deploy-production]
    if: always() && (needs.deploy-preview.result == 'success' || needs.deploy-production.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Wait for deployment propagation
        run: sleep 30

      - name: Check deployment health
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            URL="https://kasama-ai.pages.dev"
          else
            URL="https://preview-pr-${{ github.event.pull_request.number }}.kasama-ai.pages.dev"
          fi
          
          echo "Checking health of $URL"
          
          # Basic connectivity check
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $URL)
          
          if [ $HTTP_STATUS -eq 200 ]; then
            echo "✅ Site is accessible (HTTP $HTTP_STATUS)"
            echo "## ✅ Health Check Passed" >> $GITHUB_STEP_SUMMARY
            echo "- **URL**: $URL" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: HTTP $HTTP_STATUS" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Site returned HTTP $HTTP_STATUS"
            echo "## ❌ Health Check Failed" >> $GITHUB_STEP_SUMMARY
            echo "- **URL**: $URL" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: HTTP $HTTP_STATUS" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Performance check
        continue-on-error: true
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            URL="https://kasama-ai.pages.dev"
          else
            URL="https://preview-pr-${{ github.event.pull_request.number }}.kasama-ai.pages.dev"
          fi
          
          # Measure load time
          LOAD_TIME=$(curl -o /dev/null -s -w '%{time_total}' $URL)
          echo "Page load time: ${LOAD_TIME}s"
          
          echo "## ⚡ Performance Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- **Load Time**: ${LOAD_TIME}s" >> $GITHUB_STEP_SUMMARY
          
          # Check if load time is acceptable (under 3 seconds)
          if (( $(echo "$LOAD_TIME < 3" | bc -l) )); then
            echo "- **Performance**: ✅ Good (< 3s)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Performance**: ⚠️ Slow (> 3s)" >> $GITHUB_STEP_SUMMARY
          fi

  # Cleanup old deployments
  cleanup:
    name: Cleanup Old Deployments
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Delete preview deployment
        run: |
          echo "## 🧹 Cleanup" >> $GITHUB_STEP_SUMMARY
          echo "Preview deployment for PR #${{ github.event.pull_request.number }} will be automatically removed by Cloudflare Pages." >> $GITHUB_STEP_SUMMARY
