name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Job 1: Pre-deployment validation
  pre-deployment:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.validation.outputs.should-deploy }}
      environment: ${{ steps.env.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run pre-deployment checks
        id: validation
        run: |
          echo "## 🔍 Pre-deployment Validation" >> $GITHUB_STEP_SUMMARY
          
          # TypeScript check
          if npm run typecheck; then
            echo "✅ TypeScript compilation: Passed" >> $GITHUB_STEP_SUMMARY
            TYPECHECK_PASS=true
          else
            echo "❌ TypeScript compilation: Failed" >> $GITHUB_STEP_SUMMARY
            TYPECHECK_PASS=false
          fi
          
          # Lint check
          if npm run lint; then
            echo "✅ ESLint validation: Passed" >> $GITHUB_STEP_SUMMARY
            LINT_PASS=true
          else
            echo "❌ ESLint validation: Failed" >> $GITHUB_STEP_SUMMARY
            LINT_PASS=false
          fi
          
          # Build check
          if npm run build; then
            echo "✅ Production build: Passed" >> $GITHUB_STEP_SUMMARY
            BUILD_PASS=true
          else
            echo "❌ Production build: Failed" >> $GITHUB_STEP_SUMMARY
            BUILD_PASS=false
          fi
          
          # Determine if deployment should proceed
          if [[ "$TYPECHECK_PASS" == "true" && "$LINT_PASS" == "true" && "$BUILD_PASS" == "true" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "✅ All pre-deployment checks passed. Proceeding with deployment." >> $GITHUB_STEP_SUMMARY
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "❌ Pre-deployment validation failed. Deployment cancelled." >> $GITHUB_STEP_SUMMARY
          fi
        env:
          VITE_SUPABASE_URL: https://placeholder.supabase.co
          VITE_SUPABASE_ANON_KEY: placeholder-key
          VITE_ENABLE_AI_FEATURES: false

  # Job 2: Deploy to staging/production
  deploy:
    name: Deploy to ${{ needs.pre-deployment.outputs.environment }}
    runs-on: ubuntu-latest
    needs: pre-deployment
    if: needs.pre-deployment.outputs.should-deploy == 'true'
    environment: 
      name: ${{ needs.pre-deployment.outputs.environment }}
      url: ${{ steps.deploy.outputs.preview-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: |
          if [[ "${{ needs.pre-deployment.outputs.environment }}" == "production" ]]; then
            vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          else
            vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
          fi

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        env:
          NODE_ENV: production
          CI: true
          SKIP_HUSKY: true
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_ENABLE_AI_FEATURES: ${{ needs.pre-deployment.outputs.environment == 'production' && 'true' || 'false' }}
          VITE_ENABLE_ANALYTICS: ${{ needs.pre-deployment.outputs.environment == 'production' && 'true' || 'false' }}
          VITE_ENABLE_OFFLINE_MODE: true

      - name: Deploy to Vercel
        id: deploy
        run: |
          if [[ "${{ needs.pre-deployment.outputs.environment }}" == "production" ]]; then
            URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          else
            URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          fi
          echo "preview-url=$URL" >> $GITHUB_OUTPUT
          echo "## 🚀 Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "Environment: ${{ needs.pre-deployment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "URL: $URL" >> $GITHUB_STEP_SUMMARY

  # Job 3: Post-deployment health checks
  health-check:
    name: Post-deployment Health Check
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy]
    if: needs.deploy.result == 'success'
    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Health check
        run: |
          URL="${{ needs.deploy.outputs.preview-url }}"
          echo "## 🏥 Health Check Results" >> $GITHUB_STEP_SUMMARY
          
          # Basic connectivity check
          if curl -f -s "$URL" > /dev/null; then
            echo "✅ Application is accessible" >> $GITHUB_STEP_SUMMARY
            HEALTH_CHECK_PASS=true
          else
            echo "❌ Application is not accessible" >> $GITHUB_STEP_SUMMARY
            HEALTH_CHECK_PASS=false
          fi
          
          # Check response time
          RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' "$URL" || echo "0")
          echo "⏱️ Response time: ${RESPONSE_TIME}s" >> $GITHUB_STEP_SUMMARY
          
          # Check for console errors (basic)
          STATUS_CODE=$(curl -o /dev/null -s -w '%{http_code}' "$URL" || echo "000")
          echo "📊 HTTP Status: $STATUS_CODE" >> $GITHUB_STEP_SUMMARY
          
          if [[ "$HEALTH_CHECK_PASS" == "true" && "$STATUS_CODE" == "200" ]]; then
            echo "✅ All health checks passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Health check failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  # Job 4: Rollback on failure
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy, health-check]
    if: failure() && needs.deploy.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Rollback deployment
        run: |
          echo "## 🔄 Rollback Initiated" >> $GITHUB_STEP_SUMMARY
          echo "Deployment failed health checks. Initiating rollback..." >> $GITHUB_STEP_SUMMARY
          
          # Get previous deployment
          PREVIOUS_DEPLOYMENT=$(vercel ls --token=${{ secrets.VERCEL_TOKEN }} --meta gitCommitSha=$(git rev-parse HEAD~1) --json | jq -r '.[0].url' | head -1)
          
          if [[ "$PREVIOUS_DEPLOYMENT" != "null" && "$PREVIOUS_DEPLOYMENT" != "" ]]; then
            vercel alias set "$PREVIOUS_DEPLOYMENT" --token=${{ secrets.VERCEL_TOKEN }}
            echo "✅ Rollback completed to: $PREVIOUS_DEPLOYMENT" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Unable to find previous deployment for rollback" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 5: Deployment summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy, health-check]
    if: always()
    steps:
      - name: Deployment summary
        run: |
          echo "## 📋 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Pre-deployment | ${{ needs.pre-deployment.result == 'success' && '✅ Passed' || '❌ Failed' }} | Validation checks |" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment | ${{ needs.deploy.result == 'success' && '✅ Passed' || '❌ Failed' }} | ${{ needs.pre-deployment.outputs.environment }} environment |" >> $GITHUB_STEP_SUMMARY
          echo "| Health Check | ${{ needs.health-check.result == 'success' && '✅ Passed' || needs.health-check.result == 'failure' && '❌ Failed' || '⏭️ Skipped' }} | Post-deployment validation |" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.deploy.result }}" == "success" && "${{ needs.health-check.result }}" == "success" ]]; then
            echo "### 🎉 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
            echo "Application deployed to ${{ needs.pre-deployment.outputs.environment }} environment" >> $GITHUB_STEP_SUMMARY
            echo "URL: ${{ needs.deploy.outputs.preview-url }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
            echo "Please check the logs above for details" >> $GITHUB_STEP_SUMMARY
          fi