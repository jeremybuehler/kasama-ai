name: Archived - Continuous Integration (disabled)

on:
  workflow_dispatch:

env:
  NODE_VERSION: "18"
  CACHE_DEPENDENCY_PATH: "package-lock.json"

jobs:
  # Detect changed paths to scope checks on PRs
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      app: ${{ steps.filter.outputs.app }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            app:
              - 'src/**'
              - 'server/**'
  # Job 1: Install dependencies and cache
  install:
    name: Install Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Cache node modules
        id: cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

  # Job 2: TypeScript type checking
  typecheck:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    needs: [install, changes]
    if: needs.changes.outputs.app == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Restore node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Run TypeScript type check
        run: npm run typecheck

  # Job 3: ESLint code quality
  lint:
    name: ESLint Code Quality
    runs-on: ubuntu-latest
    needs: [install, changes]
    if: needs.changes.outputs.app == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Restore node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Run ESLint
        run: npm run lint

  # Job 4: Prettier format check
  format-check:
    name: Prettier Format Check
    runs-on: ubuntu-latest
    needs: [install, changes]
    if: needs.changes.outputs.app == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Restore node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Check code formatting
        run: npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}"

  # Job 5: Build application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [typecheck, lint, format-check]
    if: needs.changes.outputs.app == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Restore node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Build application
        run: npm run build
        env:
          VITE_SUPABASE_URL: https://placeholder.supabase.co
          VITE_SUPABASE_ANON_KEY: placeholder-key
          VITE_ENABLE_AI_FEATURES: false
          VITE_ENABLE_OFFLINE_MODE: true
          VITE_ENABLE_ANALYTICS: false

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: build/
          retention-days: 7

      - name: Bundle size analysis
        run: |
          echo "## Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size | Gzipped |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|---------|" >> $GITHUB_STEP_SUMMARY
          find build -name "*.js" -o -name "*.css" | while read file; do
            size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo "0")
            gzipped=$(gzip -c "$file" | wc -c)
            filename=$(basename "$file")
            echo "| $filename | ${size} bytes | ${gzipped} bytes |" >> $GITHUB_STEP_SUMMARY
          done

  # Job 6: Accessibility audit (when tests are available)
  accessibility:
    name: Accessibility Audit
    runs-on: ubuntu-latest
    needs: build
    if: false # Disabled until tests are implemented
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Restore node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files
          path: build/

      - name: Run accessibility tests
        run: echo "Accessibility tests will be implemented in future iteration"

  # Success summary job
  ci-success:
    name: CI Pipeline Success
    runs-on: ubuntu-latest
    needs: [typecheck, lint, format-check, build]
    if: always()
    steps:
      - name: Check CI status
        run: |
          if [[ "${{ needs.typecheck.result }}" == "success" && 
                "${{ needs.lint.result }}" == "success" && 
                "${{ needs.format-check.result }}" == "success" && 
                "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ All CI checks passed successfully!"
            echo "## ✅ CI Pipeline Success" >> $GITHUB_STEP_SUMMARY
            echo "All quality checks and build completed successfully." >> $GITHUB_STEP_SUMMARY
            echo "- TypeScript compilation: ✅" >> $GITHUB_STEP_SUMMARY
            echo "- ESLint validation: ✅" >> $GITHUB_STEP_SUMMARY
            echo "- Code formatting: ✅" >> $GITHUB_STEP_SUMMARY
            echo "- Production build: ✅" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some CI checks failed"
            echo "## ❌ CI Pipeline Failed" >> $GITHUB_STEP_SUMMARY
            echo "One or more quality checks failed." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
